
there is no guarantee that command buffers will be executed in the order they have been submitted by the application
framebuffer object references all of the VkImageView objects that represent the attachments
Subpasses are subsequent rendering operations that depend on the contents of framebuffers in previous passes

2024/05/14---------------------------------------------------------------------------------------------------------------------------
renderpass specifies how many attachments there will be during gfx operation and how their layout, sampler state set

framebuffers are dependent on renderpasses (= create info takes renderpass)
the thing is, swapchain images have framebuffers individually meaning in each every frame, different framebuffer must be bound.

- framebuffer is render target
- ?? is it possible to pair n framebuffers with 1 renderpass ??
	- if so, make single pipeline with multiple render targets -> guesssing it has to be possible
- pipeline cannot own framebuffers ? -> re-think
- if pipeline owns renderpass, then framebuffer(render target) must be made depending on the pipeline
	-> but then again, regardless of vulkan, pipeline must know how input&output attachments are configured which is
		 exactly what vulkan renderpass is for. meaning it's neccessary

2024/05/15---------------------------------------------------------------------------------------------------------------------------
framebuffer is just a buffer which holds render target information
it can specify how each render targets will be used during redering that frame
image used by framebuffer is the actual render target

pipeline knows shader layout
	-> shader knows number of attachments and thier layouts
		-> pipline has render targets
			-> how do we draw to a render target which was not created by pipline
			render target = image & framebuffer can be composed when we decide which pipeline will be drawing to which render target

shader pair 1 : pipeline 1 : renderpass 1 : framebuffer n
framebuffer 1 : attachments(render target) n

1 pipline -> 3 swap chain images -> 3 framebuffers with each different attachments

synchronization
	semaphore
		semaphore is used to add order between queue operations
		are used both to order work inside the same queue and between different queues

	fences
		fences must be reset manually to put them back into the unsignaled state
		they block cpu

	In summary, semaphores are used to specify the execution order of operations on the GPU while fences are used to keep the CPU and GPU in sync with each-other.

2024/05/16---------------------------------------------------------------------------------------------------------------------------
why would i need render target interface
- to bind pipline and render target separatly
- can render to the same target using different pipelines

2024/08/07---------------------------------------------------------------------------------------------------------------------------
managed to draw image.
figuring out how to deal with binding interfaces (vk version of uniform buffer and texture & exposed version)

2024/08/11---------------------------------------------------------------------------------------------------------------------------
obviously, setting PoolSize for VkDescriptorPool with large number can be wasteful
it is valid to create another pool once previouse one reaches pool size according to GPT

2024/10/06---------------------------------------------------------------------------------------------------------------------------
after making descriptor set per pipeline, found out that vkUpdateDescriptorSet call is bottlenecking
and if we think about it, there's no need to update the desctriptor set itself when there's no change to the actual buffer
we only need to re-bind descriptor set when drawing different meshes

so we have to make material to own descriptor set

2024/10/09---------------------------------------------------------------------------------------------------------------------------
reason separate descriptor sets are requried in each frames is because of cpu/gpu sync
specifically for descriptor sets which require dynamic updates like transform buffer
using single set for these buffer will cause performance issue or race condition between cpu/gpu (depends on how you implement it)

but in other words, static buffers like static materials, since there's no write operation, we can reuse it (single set)

2024/11/03---------------------------------------------------------------------------------------------------------------------------
we're doing two things in order
1. optimizing static uniform buffers to be only updated once
	- make descriptors be owned by per material
		- to create descriptor sets, we need desciprtor pools, model gets allocated with single pool depending on numMaterials required

2. implemeting render pass to optimize ridiculous draw call overhead


2024/12/24---------------------------------------------------------------------------------------------------------------------------
- separated renderer from api
- in vulkan, binding index must be unique across shader stages unlike d3d11
	- it is possible to bind to every stages with VK_SHADER_STAGE_ALL but will have all sorts of downsides including performance



